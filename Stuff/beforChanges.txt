package control;

import java.util.Arrays;

import robot.Robot;

//Robot Assignment for Programming 1
public class RobotControl implements Control {
	// we need to internally track where the arm is
	private int height = Control.INITIAL_HEIGHT;
	private int width = Control.INITIAL_WIDTH;
	private int depth = Control.INITIAL_DEPTH;

	private int[] barHeights;
	private int[] blockHeights;
	// no need to write any constructor, the robot is initialised
	private Robot robot; // by calling the init method as shown on line 33 below.

	// called by RobotImpl
	@Override
	public void control(Robot robot, int[] barHeightsDefault, int[] blockHeightsDefault) {
		this.robot = robot;

		// some hard coded init values you can change these for testing
		this.barHeights = new int[] {  };
		this.blockHeights = new int[] { 1 };

		robot.init(this.barHeights, this.blockHeights, height, width, depth);

		start();

	}

	private void start() {

		int arr[][] = new int[10][];
		for (int x = 0; x < 10; x++) {
			if (x == 0 || x == 9) {
				arr[x] = new int[0];
			} else {
				arr[x] = new int[initialArraySize(x + 1)];
			}
		}
		int y = 1;
		for (int x = 0; x < this.barHeights.length; x++) {

			arr[y][0] = this.barHeights[x];
			y++;
		}

		int x = 1;
		int counter = 0;
		int blockNo = 0;

		for (int i = 0; i < this.blockHeights.length; i++) {

			if (blockNo < this.blockHeights.length) {
				if (x > 0 && x < 9) {
					arr[x][placeInArray(x, counter)] = this.blockHeights[i];

					counter++;
				}
			}

			if (counter < 7 && i < 8) {
				x++;
			}

			else if (counter == 8) {
				continue;
			} else if (counter >= 8 && counter < 16) {
				x--;
			} else if (i == 15) {
				continue;
			}

			else {
				x++;
			}

			if (counter == 16) {
				counter = 0;
			}
		}

		for (int i = 0; i < arr.length; i++) {
			System.out.println(Arrays.toString(arr[i]));
		}

		int maxHeight = maxHeight(arr);
		boolean pickUP = false;
		rearrange(arr, maxHeight, pickUP);

	}

	private int initialArraySize(int i) {
		int v1 = i - 1;
		int v2 = 18 - i;
		int v3 = 15 + i;
		try {
		if (Integer.toString(this.blockHeights[i - 2]) != null) {
			if (this.blockHeights.length >= v1 && this.blockHeights.length < v2) {
				return 2;
			} else if (this.blockHeights.length >= v2 && this.blockHeights.length < v3) {
				return 3;
			} else if (this.blockHeights.length >= v3) {
				return 4;
			}

		}
		}catch(ArrayIndexOutOfBoundsException e){
		return 0;
	}return 0;
	}

	private int placeInArray(int rowNum, int counter) {
		int v1 = (rowNum + 1);

		int v2 = (counter + rowNum);
		int v3 = (counter - rowNum);
		int x = 0;
		if (v1 == rowNum + 1) {
			x = 1;
		}
		if (v2 == 16) {
			x = 2;
		}
		if (v3 == 15) {
			x = 3;
		}
//		System.out.println("RowNum: " + rowNum + "| Counter: " + counter);
//		System.out.println("x: " + x + "\n");
//		System.out.println("v1: " + v1 + "| v2: " + v2 + "| v3: " + v3 + "\n\n");

		return x;

	}

	private void rearrange(int[][] arr, int maxHeight, boolean pickUP) {
		boolean right = true;
		int blockSize = 0;
		this.depth = 1;
		int counter = 0;
		int noMoved =0;
		System.out.println("\n\nstart\n\n");
		while(noMoved<this.blockHeights.length){
			if(right) {
			System.out.print("Start Right\n-----\n");
			int target = findNextBlockRight(arr);
			moveRightToTarget(target, blockSize, arr, maxHeight(arr, maxHeight));
			
			
			lowerArm1();
			lowerArm2(blockSize, arr, right, maxHeight(arr, maxHeight));
			counter = lowerArm3(blockSize, arr, right);

			robot.pick();
			raiseArm3(counter, arr);
			blockSize = getBlockSize(arr);
			this.depth = this.depth + blockSize;
			arr = updateArr(arr, blockSize);

			while (this.width < 10) {
//						System.out.print("Next move right\n\n-----------------------------------\n");
				moveRight(blockSize, arr, maxHeight(arr, maxHeight));
//						System.out.print("-----------------------------------\n");
			}

			counter = lowerArm3(blockSize, arr, right);
			this.depth = this.depth - blockSize;
			arr = updateArr(arr, blockSize);
			robot.drop();

			blockSize = 0;
			raiseArm3(counter, arr);

			right = false;
			noMoved++;
			}else {
			System.out.print("\nend Right\\n-----");

			System.out.print("Start Left\n-----");
			int target = findNextBlockLeft(arr);
			moveLeftToTarget(findNextBlockLeft(arr), blockSize, arr, maxHeight(arr, maxHeight));
			lowerArm2(blockSize, arr, right, maxHeight(arr, maxHeight));
			lowerArm3(blockSize, arr, right);

			robot.pick();
			raiseArm3(counter, arr);
			blockSize = getBlockSize(arr);
			this.depth = this.depth + blockSize;
			arr = updateArr(arr, blockSize);
			while (this.width > 1) {
				moveLeft(blockSize, arr, maxHeight(arr, maxHeight));
				System.out.print("-----------------------------------\n");
			}
			counter = lowerArm3(blockSize, arr, right);
			this.depth = this.depth - blockSize;
			robot.drop();
			arr = updateArr(arr, blockSize);
			blockSize = 0;
			raiseArm3(counter, arr);
			System.out.print("\nend Left\\n-----");
		}
		}
	}

	private int[][] updateArr(int[][] arr, int blockSize) {
		int[] temp;

		if (this.width == 10 || this.width == 1) {
			if (arr[this.width - 1].length < 1) {
				temp = new int[] { blockSize };
				arr[this.width - 1] = temp;
				return arr;
			} else {
				temp = new int[(arr[this.width - 1].length) + 1];
				for (int i = 0; i < temp.length; i++) {
					if (i == temp.length - 1) {
						temp[i] = blockSize;
					} else {
						temp[i] = arr[this.width - 1][i];

					}
				}
				arr[this.width - 1] = temp;
				return arr;
			}
		}

		else {
			temp = new int[(arr[this.width - 1].length) - 1];
			{
				for (int i = 0; i <= temp.length - 1; i++) {

					temp[i] = arr[this.width - 1][i];
					System.out.println(arr[this.width - 1][i]);
				}
			}
		}

		arr[this.width - 1] = temp;

		for (int i = 0; i < arr.length; i++) {
			System.out.println(Arrays.toString(arr[i]));
		}

		return arr;
	}

	private int getBlockSize(int[][] arr) {
		System.out.println("Blocksize = " + arr[this.width - 1][(arr[this.width - 1].length - 1)]);
		return arr[this.width - 1][(arr[this.width - 1].length - 1)];

	}

	private int colSizeRight(int[][] arr) {
		int colSize = 0;
		for (int i = 0; i < arr[this.width].length; i++) {
			colSize = +arr[this.width][i];
		}
		return colSize;
	}

	private int colSizeLeft(int[][] arr) {
		int colSize = 0;
		for (int i = 0; i < arr[this.width - 2].length; i++) {
			colSize = +arr[this.width - 2][i];
		}
		return colSize;
	}

	private void moveRight(int blockSize, int[][] arr, int maxHeight) {

//		System.out.println("Height Arm 1: " + this.height);
//		System.out.println("Depth Arm 3: " + this.depth);
//		System.out.println("Width Arm 2: " + this.width);

		if (this.height > this.depth + colHeight(arr[this.width]))
			System.out.println("move Right");
		robot.extend();
		this.width++;
		for (int i = this.height - this.depth; i > colHeight(arr[this.width - 1])
				&& this.height > maxHeight(arr) + 1; i--) {
			downtoHight(arr[this.width - 1], arr, maxHeight);
		}

		while (this.height - this.depth < maxHeight(arr, maxHeight) + blockSize && pathBlockRight(arr, blockSize)) {

			System.out.println("move Up");
			robot.up();
			this.height++;
		}

	}

	private void moveLeft(int blockSize, int[][] arr, int maxHeight) {
//		System.out.println("Height Arm 1: " + this.height);
//		System.out.println("Depth Arm 3: " + this.depth);
//		System.out.println("Width Arm 2: " + this.width);
		try {
			if (this.height > this.depth + colHeight(arr[this.width - 2]))
				;
			{
				robot.contract();
				this.width--;

				for (int i = this.height - this.depth; i > colHeight(arr[this.width - 1]) + 1
						&& this.height > maxHeight(arr) + 1; i--) {
					downtoHight(arr[this.width - 1], arr, maxHeight);

				}

			}

			while (this.height - this.depth < maxHeight(arr, maxHeight) + blockSize && pathBlockLeft(arr, blockSize)) {
				System.out.println("move Up");
				robot.up();
				this.height++;
			}
		} catch (ArrayIndexOutOfBoundsException e) {

		}
	}

	private void lowerArm1(int[] colArr, int[][] arr, int maxHeight) {

		if (this.height > this.depth + colHeight(colArr)) {
			if (this.height - 1 > maxHeight(arr, maxHeight)) {
				System.out.println("move down - maxHeight");
				robot.down();
				this.height--;
			}
			if (this.width < tallestCol(arr)) {
				System.out.println("move down - tallestCol: " + tallestCol(arr));
				robot.down();
				this.height--;
			}
		}
	}

	private void moveRightToTarget(int target, int blockSize, int[][] arr, int maxHeight) {
		while (this.width < target) {
			if (this.height > this.depth + colHeight(arr[this.width]))
				;
			System.out.println("move Right");
			robot.extend();
			this.width++;
		}

	}

	private void moveLeftToTarget(int target, int blockSize, int[][] arr, int maxHeight) {
		while (this.width > target) {
			if (this.height > this.depth + colHeight(arr[this.width - 1]))
				;
			System.out.println("move left");
			robot.contract();
			this.width--;
		}
	}

	private boolean pathBlockRight(int[][] arr, int blockSize) {

		try {
			if (this.height < colHeight(arr[this.width]) + this.depth) {

				System.out.println("path blocked");
				return true;
			} else {

				System.out.println("path not blocked");
				return false;
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			return false;
		}

	}

	private boolean pathBlockLeft(int[][] arr, int blockSize) {
		try {
			if (this.height < colHeight(arr[this.width - 2]) + this.depth) {

				System.out.println("path blocked");
				return true;
			} else {

				System.out.println("path not blocked");
				return false;
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			return false;
		}

	}

	private int maxHeight(int[][] arr, int maxHeight) {
		for (int i = 0; i < 10; i++) {
			int newHeight = 0;
			for (int z = 0; z < arr.length; z++) {
				try {
					newHeight = newHeight + arr[i][z];
				} catch (ArrayIndexOutOfBoundsException e) {
					continue;
				}
			}
			if (newHeight > maxHeight) {
//				System.out.println("New Max Height" + newHeight);
				maxHeight = newHeight;
			}
		}
		return maxHeight;
	}

	private int maxHeight(int[][] arr) {
		int maxHeight = 0;
		for (int i = 0; i < 10; i++) {
			int newHeight = 0;
			for (int z = 0; z < arr.length; z++) {
				try {
					newHeight = newHeight + arr[i][z];
				} catch (ArrayIndexOutOfBoundsException e) {
					continue;
				}
			}
			if (newHeight > maxHeight) {
//				System.out.println("New Max Height" + newHeight);
				maxHeight = newHeight;
			}
		}
		return maxHeight;
	}

	private int tallestCol(int[][] arr) {
		int maxHeight = 0;
		int colNum = 0;
		for (int i = 0; i < 10; i++) {
			int newHeight = 0;
			for (int z = 0; z < arr.length; z++) {
				try {
					newHeight = newHeight + arr[i][z];
				} catch (ArrayIndexOutOfBoundsException e) {
					continue;
				}
			}
			if (newHeight > maxHeight) {
//				System.out.println("New Max Height" + newHeight);
				maxHeight = newHeight;
				colNum = i;
			}
		}
		return colNum;
	}

	private int colHeight(int[] arr) {
		int tempHeight = 0;
//		System.out.println("height for Column " + (this.width + 1) + " :");
		for (int i = 0; i < arr.length; i++) {
//			System.out.println(tempHeight + "+" + arr[i]);
			tempHeight = tempHeight + arr[i];
		}

		return tempHeight;
	}

	private void lowerArm2(int blockSize, int[][] arr, boolean right, int maxHeight) {
		for (int i = this.height - this.depth; i > colHeight(arr[this.width - 1])
				&& this.height > maxHeight(arr) + 1; i--) {
			if (this.width <= tallestCol(arr)) {
				downtoHight(arr[this.width - 1], arr, maxHeight);
			}

		}
	}

	private int lowerArm3(int blockSize, int[][] arr, boolean right) {
		int counter = 0;
		while (colHeight(arr[this.width - 1]) < this.height - this.depth) {
			robot.lower();
			this.depth++;
			counter++;
		}
		return counter;
	}

	private void raiseArm3(int counter, int[][] arr) {
		while (this.depth > 1) {
			robot.raise();
			this.depth--;
		}

	}

	private int findNextBlockRight(int[][] arr) {
		int y = 0;
		for (int x = 1; x < 9; x++) {
			if (arr[x].length <= 1 && arr[x][0] == this.barHeights[y]) {
				y++;
				continue;

			} else {
				return x+1;
			}
		}
		return 0;
	}

	private int findNextBlockLeft(int[][] arr) {

		int y = this.barHeights.length;
		if(y<1) {
			for (int x= 8; x> 1; x--) {
				if(arr[x].length >=1) {
					System.out.println("Target col: "+(x+1));
					return x+1;
				}
			}
		}
			for (int x= 8; x> 1; x--) {
		int i = arr[x].length-1;	
		
		if(arr[x].length >1) {
			if(arr[x][i] != this.barHeights[y]) {
				System.out.println("Target col: "+(x+1));
				return x+1;
			}else {
				y--;
				continue;
			}
		}
		}
		return 0;
	
}
}
